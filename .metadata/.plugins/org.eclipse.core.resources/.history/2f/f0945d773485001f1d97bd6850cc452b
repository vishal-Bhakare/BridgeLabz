package DSA;

class Node3 {
	public Object data;
	public Node3 next;

	public Node3(Object data) {
		this.data = data;
		this.next = null;
	}
}

public class LinkedListQueue {

	private Node3 front;
	private Node3 rear;

	public LinkedListQueue() {
		this.front = null;
		this.rear = null;
	}

	// Enqueue operation to add an element to the end of the queue

	public void enqueue(Object data) {

		Node3 nd = new Node3(data);

		// If the queue is empty, then the new node is both the front and rear

		if (rear == null) {
			front = nd;
			rear = nd;
			return;
		}
		// Otherwise, add the new node at the end and change the rear
		rear.next = nd;
		rear = nd;
	}

	// Dequeue operation to remove an element from the front of the queue
	public int dequeue(Object data) {

		// If the queue is empty, return -1 or an error indicator
		if (front == null) {

			System.out.println("Queue Is Empty");
			return -1;
		}

		Node3 temp = front;
		front = front.next;

		// If the front becomes null, then make the rear also null
		if (front == null) {
			rear = null;
		}

		return temp.data;

	}

}
