package OppsProjects;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Scanner;

public class LibraryManagements {

	private List<Books> books = new ArrayList<Books>();
	private List<Member> members = new ArrayList<Member>();
	private Map<Integer, List<Books>> record = new HashMap<Integer, List<Books>>();

	public void addBooks(Books book) {

		books.add(book);
		System.out.println("Books Added Successfully....");
	}

	public void addMember(Member member) {

		members.add(member);
		System.out.println("Members Added Succesfully....");
	}

	public Books getBooksById(int bookId) {

		for (Books book : books) {

			if (book.getBookId() == bookId) {

				return book;
			}
		}

		return null;
	}

	public Member getMemberById(int memberId) {

		for (Member member : members) {

			return member;

		}

		return null;
	}

	public void issueBook(int memberId, int bookId) {

		Member member = getMemberById(memberId);
		Books book = getBooksById(bookId);

		if (member != null && book != null) {

			record.computeIfAbsent(memberId, k -> new ArrayList<>()).add(book);

			System.out.println("Book issued successfully to member: " + member.getMemberName());
		} else {

			System.out.println("Invalid member or book ID!");
		}
	}

	public void returnBooks(int memberId, int bookId) {

		if (record.containsKey(memberId)) {

			List<Books> borrowedBooks = record.get(memberId);

			Books booksById = getBooksById(bookId);

			if (borrowedBooks != null && borrowedBooks.remove(booksById)) {

				System.out.println("Books Return SuccessFully");
			} else {
				System.out.println("Book not found in member's borrowed books!");
			}

		} else {

			System.out.println("Member and book Id Not Found");
		}

	}

	public void diplayAllBooks() {

		if (books.isEmpty()) {
			System.out.println("Books Are Not Available...");
		} else {
			System.out.println("Library Books:");
			for (Books book : books) {

				System.out.println(book);
			}

		}
	}

	public void displayAllMembers() {
		if (members.isEmpty()) {
			System.out.println("No members available.");
		} else {
			System.out.println("Library Members:");
			for (Member member : members) {
				System.out.println(member);
			}
		}
	}

	public void displayLoans() {

		if (record.isEmpty()) {

			System.out.println("No loan records.");

		} else {
			System.out.println("Loan Records:");

			record.forEach((memberId, booksBorrowed) -> {

				System.out.println("Member ID: " + memberId + " has borrowed: ");

				booksBorrowed.forEach(book -> System.out.println(book));
			});
		}
	}

	public static void main(String[] args) {

		LibraryManagements lm = new LibraryManagements();
		Scanner sc = new Scanner(System.in);

		while (true) {

			System.out.println("\nLibrary Management System");
			System.out.println("1. Add Book");
			System.out.println("2. Add Member");
			System.out.println("3. Issue Book");
			System.out.println("4. Return Book");
			System.out.println("5. Display All Books");
			System.out.println("6. Display All Members");
			System.out.println("7. Display Loan Records");
			System.out.println("8. Exit");
			System.out.print("Enter your choice: ");

			int choice = sc.nextInt();

			switch (choice) {
			case 1:
				System.out.print("Enter Book ID (int): ");
				int bookId = sc.nextInt();
				System.out.print("Enter Book Title: ");
				String title = sc.next();
				System.out.print("Enter Book Author: ");
				String author = sc.next();
				Books book = new Books(bookId, title, author);
				lm.addBook(book);
				break;

			case 2:
				System.out.print("Enter Member ID (int): ");
				int memberId = sc.nextInt();
				System.out.print("Enter Member Name: ");
				String memberName = sc.next();
				Member member = new Member(memberId, memberName);
				lm.addMember(member);
				break;

			case 3:
				System.out.print("Enter Member ID (int): ");
				int issueMemberId = sc.nextInt();
				System.out.print("Enter Book ID (int): ");
				int issueBookId = sc.nextInt();
				lm.issueBook(issueMemberId, issueBookId);
				break;

			case 4:
				System.out.print("Enter Member ID (int): ");
				int returnMemberId = sc.nextInt();
				System.out.print("Enter Book ID (int): ");
				int returnBookId = sc.nextInt();
				lm.returnBooks(returnMemberId, returnBookId);
				break;

			case 5:
				lm.displayAllBooks();
				break;

			case 6:
				lm.displayAllMembers();
				break;

			case 7:
				lm.displayLoans();
				break;

			case 8:
				System.out.println("Exiting...");
				sc.close();
				System.exit(0);

			default:
				System.out.println("Invalid choice! Please try again.");
			}

		}
	}
}
